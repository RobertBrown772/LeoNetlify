/*==============================================================================
// File:        _mixins.scss
// Synopsis:    Main mixins & reusable items - SASS
//============================================================================*/

// Adjoining Class.
@mixin adjoin($adjoin) {
  &.#{$adjoin} {
      @content;
  }
}

// BEM Element.
@mixin element($element) {
  &__#{$element} {
      @content;
  }
}

/// BEM Modifier.
@mixin modifier($modifier) {
  &--#{$modifier} {
      @content;
  }
}

// Default pseudo configuration.  
@mixin pseudo($display: block, $pos: absolute, $content: "") {
  content: $content;
  display: $display;
  position: $pos
}

// Setting a placeholder on input fields.  
@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

//  PRECISE CONTROL OVER RESPONSIVE TYPOGRAPHY FOR SASS
//  ---------------------------------------------------

@mixin fluid-prop($properties, $min-vw, $max-vw, $min-value, $max-value, $boolean: false) {
  @if $boolean {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
  @else {
    @each $property in $properties {
      #{$property}: $min-value;
    }
  }

  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($number) {
  @if type-of($number)=="number"and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

@mixin page-padding($context: 12) {
  padding-right: 20px;
  padding-left: 20px;

  @media (min-width: $screen-md) {
    padding-right: percentage(1/$context);
    padding-left: percentage(1/$context);
  }
}